use strict;
use warnings;
no warnings 'portable';  # Support for 64-bit ints required
use Math::BigInt;

# generate intzip autotest cases

use constant TESTS_DIR => 'tests';
use constant TESTDATA_DIR => 'testdata';

sub sorted { [ sort { $a <=> $b } keys %{ { map { $_ => 1 } @_ } } ] }

my %max = ( u16 => '0xffff', u32 => '0xffffffff', u64 => '0xffffffffffffffff' );

my @at_files;

sub at_category($$@) {
  my ($category,$banner) = (shift,shift);

  # init .at test category file
  push @at_files, "$category.at";
  my $at_path = +TESTS_DIR."/$category.at";
  open my $at_fh, '>', $at_path or die $!;
  printf $at_fh "# Tests for the $category category.\n".
    "#\n# - This file was auto-generated by %s -\n#\n".
    "AT_BANNER([[%s.]])\n",$0,$banner;

  # create tests
  foreach my $t ( @_ ) {
    # defaults
    $t->{type} = 'u32' unless defined $t->{type};
    $t->{form} = 'hex' unless defined $t->{form};
    
    unless ( defined $t->{int_data} ) {
      $t->{int_data} = [ map { Math::BigInt->new($_) } @{$t->{data}} ];
    }

    unless ( defined $t->{name} ) {
      $t->{name} = join ',', map { $_->as_hex } @{$t->{int_data}};
      $t->{setup} = sprintf '[[%s]]', $t->{name} unless defined $t->{setup};
    }
    $t->{setup} = $t->{name} unless defined $t->{setup};
    $t->{setup} .= (sprintf ' %s/%s',$t->{type},$t->{form});
    
    unless ( defined $t->{filename} ) {
      $t->{filename} = lc $t->{name};
      $t->{filename} =~ s/[^a-z0-9]/_/gi;
      $t->{filename} .= ".$t->{type}" if $t->{form} eq 'bin';
      $t->{filename} .= ".$t->{form}";
      $t->{filename} = join '_', ($category,$t->{filename});
    }
    
    my $path = +TESTDATA_DIR."/$t->{filename}";
    unless ( -f $path ) {
      # create test data
      my $map;
      if ( $t->{form} eq 'hex' ) { # hex
        $map = sub {
          my $h = $_[0]->as_hex;
          $h =~ s/^0x//;
          "$h\n";
        };
      }
      else { # bin
        # 'Q>' only available with 64-bit support
        my $pack = { u16 => 'n', u32 => 'N', u64 => 'Q>' }->{$t->{type}};
        $map = sub { pack $pack, $_[0]->numify };
      }
      open my $t_fh, '>', $path or die $!;
      foreach ( @{$t->{int_data}} ) {
        my $d = &$map($_);
        print $t_fh $d;
      }
      close $t_fh;
    }
    
    # add to .at test category file
    unless ( defined $t->{options} ) {
      $t->{options} = sprintf '--%s', $t->{type};
      $t->{options} .= ' --binary' if $t->{form} eq 'bin';
    }
    printf $at_fh "AT_CHECK_ENCODE_DECODE([%s],[%s],[%s])\n",
      map { $t->{$_} } qw(setup options filename);
  }
  close $at_fh;
}

# -- tests --

at_category empty => 'Empty List Tests',
  map {
    my $form = $_;
    map {
      my $type = $_;
      { type => $type, form => $form, filename => 'empty', setup => 'Empty', data => [] }
    } (qw( u16 u32 u64 ));
  } qw ( hex bin );

at_category singleton => 'Singleton List Tests',
  (map {
    my $form = $_;
    map {
      my $type = $_;
      (map {
        { type => $type, form => $form, data => [ $_ ] }
      } (0,1,2,$max{$type}))
    } (qw( u16 u32 u64 ));
  } qw ( hex bin ));
  
at_category short => 'Short List Tests',
  (map {
    my $form = $_;
    map {
      my $type = $_;
      (
        (map {
          { type => $type, form => $form, data => [ 0,$_ ] }
        } (1,2,$max{$type})),
        (map {
          { type => $type, form => $form, data => [ 1,2,$_ ] }
        } (3,23,$max{$type})),
        { type => $type, form => $form, data => [ 10,100,1000,10000 ] },
      )
    } (qw( u16 u32 u64 ));
  } qw ( hex bin ));

at_category equidistant => 'Equidistant Interval Tests',
  (map {
    my $form = $_;
    map {
      my $type = $_;
      (
        (map {
          my $dist = $_;
          { type => $type, form => $form, name => "Distance $dist",
            data => [ map { $dist*$_ } ( 0 .. 0x10 ) ] }
        } (1,2,3,100)),
        { type => $type, form => $form, name => "Alternating",
          data => [ map { 2*$_ + ($_ % 2) } ( 0 .. 0x100 ) ] },
        { type => $type, form => $form, name => "Multiple",
          data => sorted( (0 .. 50), (100 .. 150), (200, 250), (0x1000 .. 0x1100 ) ) },
      )
    } (qw( u16 u32 u64 ));
  } qw ( hex bin ));

# -- end of tests --

# create autotest include
open my $at, '>', +TESTS_DIR."/gentests.at" or die $!;
printf $at "m4_include([%s])\n", $_ foreach @at_files;
close $at;

# create automake include
open my $am, '>', +TESTS_DIR."/gentests.am" or die $!;
printf $am "GENTESTS_AT = %s\n", (join ' ', ('gentests.at', @at_files));
close $am;

__END__
