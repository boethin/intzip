#!/usr/bin/perl
use strict;
use warnings;

# generate autotets category files

use constant TESTS_DIR => 'tests';
use constant TESTDATA_DIR => 'testdata';

sub init_category {
  my ($category,$banner) = @_;

  my $at_path = +TESTS_DIR."/$category.at";
  open my $fh, '>', $at_path or die $!;
  print $fh "# Tests for the $category category.\n";
  printf $fh "#\n# - This file was auto-generated by %s -\n#\n", $0;
  printf $fh "AT_BANNER([[%s.]])\n\n", $banner;
  close $fh;
}

sub create_encode_decode {
  my ($category,$name,$list) = @_;
  my ($fh,$setup);
  
  if ( defined $name ) {
    $setup = $name;
  }
  else {
    $name = sprintf (join ',', map { $_ > 9 ? (sprintf '0x%X', $_) : $_ } @$list);
    $setup = sprintf '[[%s]]', $name;
  }

  # testdata
  my $filename = $name;
  $filename =~ s/[^a-z0-9]/_/gi;
  $filename = $category."_$filename";
  my $data_path = +TESTDATA_DIR."/$filename";
  open $fh, '>', $data_path or die $!;
  printf $fh "%x\n", $_ foreach @$list;
  close $fh;
  
  # test
  my $at_path = +TESTS_DIR."/$category.at";
  open $fh, '>>', $at_path or die $!;
  printf $fh "# Check whether encoding/decoding of $name maps to itself.\n";
  printf $fh "AT_CHECK_ENCODE_DECODE([%s],[%s])\n\n", $setup, $filename;
  close $fh;

}

init_category('empty','Empty List Test');
create_encode_decode('empty','Empty',[]);

init_category('singleton','Singleton List Tests');
create_encode_decode('singleton',undef,[0]);
create_encode_decode('singleton',undef,[1]);
create_encode_decode('singleton',undef,[2]);
create_encode_decode('singleton',undef,[3]);
create_encode_decode('singleton',undef,[0xFFFF]);
create_encode_decode('singleton',undef,[0xFFFFFFFF]);

init_category('short','Short List Tests');
create_encode_decode('short',undef,[0,1]);
create_encode_decode('short',undef,[0,0xFFFFFFFF]);
create_encode_decode('short',undef,[0,2]);
create_encode_decode('short',undef,[1,2,3]);
create_encode_decode('short',undef,[0,2,4]);
create_encode_decode('short',undef,[1,2,0xFFFF]);
create_encode_decode('short',undef,[0,0xFFFE,0xFFFF]);
create_encode_decode('short',undef,[0xFFF0,0xFFFF]);
create_encode_decode('short',undef,[1,2,5,7]);
create_encode_decode('short',undef,[0,1,2,4,8,16]);




